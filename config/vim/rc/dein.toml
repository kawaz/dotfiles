[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]] # カーソル位置のコンテキストのftを判定するライブラリ
repo = 'Shougo/context_filetype.vim'

#[[plugins]] # カーソル位置のコンテキストに合わせてftを切り替える
#repo = 'osyo-manga/vim-precious'
#depends = ['context_filetype.vim', 'vim-textobj-user']
#hook_add = '''
#let g:context_filetype#filetypes = {
#      \ 'sh': [
#      \   {
#      \    'start': '[^<]<<\([\\''"]\?\)\([a-zA-Z0-9]\+\)\1$',
#      \    'end': '^\2$', 'filetype': '\2',
#      \   },
#      \ ],
#      \}"}}}
#'''

[[plugins]] # vim-precious で <Plug>(textobj-precious-i) を使用したい時に必要。
repo = 'kana/vim-textobj-user'

# LSP
[[plugins]]
repo = 'prabirshrestha/vim-lsp'
[[plugins]]
repo = 'mattn/vim-lsp-settings'
depends = ['prabirshrestha/vim-lsp']
hook_add = '''
let g:lsp_settings = {
      \   'intelephense': {
        \     'workspace_config': {
          \       'intelephense': {
            \         'phpVersion': '8.0.0',
            \         'environment': {
              \           'phpVersion': '8.0.0'
              \         }
              \       }
              \     }
              \   }
              \ }
'''

# 補完プラグイン
[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'
[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'
depends = ['prabirshrestha/asyncomplete.vim', 'prabirshrestha/vim-lsp']

[[plugins]]
repo = 'Shougo/neocomplete'
if = 'has("lua")'
on_i = 1
hook_add = '''
  " 最初の候補がデフォで選択されないようにする
  set completeopt+=noinsert
  " 起動時に有効化
  let g:neocomplete#enable_at_startup = 1
  " " 自動で補完候補を出す
  let g:neocomplete#disable_auto_complete = 0
  " メニューの一番目を自動選択
  let g:neocomplete#enable_auto_select = 1


  let g:neocomplete#keyword_patterns = get(g:, 'neocomplete#keyword_pattern', {})
  let g:neocomplete#keyword_patterns['default'] = '\h\w*'

  " ログファイルは補完を停止
  let g:neocomplete#sources#buffer#disabled_pattern = '\.log\|\.log\.\|\.jax\|Log.txt'
  " " 大文字小文字とかあいまい検索とか
  let g:neocomplete#enable_ignore_case = 1
  let g:neocomplete#enable_smart_case  = 1
  let g:neocomplete#enable_fuzzy_completion = 1

  " Enable omni completion.
  autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
  autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
  autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
  autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
  autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

  let g:neocomplete#force_omni_input_patterns = get(g:, 'neocomplete#force_omni_input_patterns', {})
  let g:neocomplete#force_omni_input_patterns.go = '[^. \t]\.\%(\h\w*\)\?'
  let g:neocomplete#force_omni_input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'

  let g:neocomplete#delimiter_patterns = get(g:, 'neocomplete#delimiter_patterns', {})
  let g:neocomplete#delimiter_patterns.ruby = ['::']
  let g:neocomplete#same_filetypes = get(g:, 'neocomplete#same_filetypes', {})
  let g:neocomplete#same_filetypes.ruby = 'eruby'
  " KeyMaps
  " Tabでいい感じに補完
  inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
  " Enterで確定（確定と同時に改行しない）
  inoremap <expr><CR>  pumvisible() ? neocomplete#close_popup() : "<CR>"
'''
hook_post_source = '''
  " neco-look を連携させる（カスタムソース追加＆text_mode_filetypesで有効化したいftリストの設定が必要）
  call neocomplete#custom#source('look', 'min_pattern_length', 1)
  let g:neocomplete#text_mode_filetypes = get(g:, 'neocomplete#text_mode_filetypes', {})
  for t in [ 'rst', 'markdown', 'gitrebase', 'gitcommit', 'vcs-commit', 'hybrid', 'text', 'help', 'tex' ]
    let g:neocomplete#text_mode_filetypes[t] = 1
  endfor
'''
[[plugins]] # 英単語が補完されるようになる(neocompleteから呼ばれる)
repo = 'ujihisa/neco-look'
on_i = 1
[[plugins]] # Github の絵文字やIssueやリポジトリURLが補完されるようになる
repo = 'rhysd/github-complete.vim'
on_i = 1
[[plugins]] # Syntaxファイルから補完候補を作ってくれる
repo = 'Shougo/neco-syntax'
on_i = 1

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets']
on_i = 1
hook_post_source = '''
let g:neosnippet#enable_snipmate_compatibility = 1
let g:neosnippet#enable_complete_done = 1
let g:neosnippet#expand_word_boundary = 1
" スニペットディレクトリを設定（同じスニペットが見つかった場合は最初の先に見つかったほうが優先される)
let g:neosnippet#snippets_directory = get(g:, 'neosnippet#snippets_directory', [])
let g:neosnippet#snippets_directory += [$XDG_CONFIG_HOME . '/vim/rc/neosnippets']
if ! empty(dein#get('neosnippet-snippets'))
  let g:neosnippet#snippets_directory += [dein#get('neosnippet-snippets').path . '/neosnippets']
endif
" Plugin key-mappings. スニペット補完候補がある場合は C-k でスニペットを展開する（Enterではない）
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)
" " SuperTab like snippets behavior. スニペットのプレースホルダ上にいる時はTabで次のプレースホルダにジャンプする
" imap <expr><TAB> neosnippet#jumpable() ? '\<Plug>(neosnippet_expand_or_jump)' : pumvisible() ? '\<C-n>' : '\<TAB>'
" smap <expr><TAB> neosnippet#jumpable() ? '\<Plug>(neosnippet_expand_or_jump)' : '\<TAB>'
" For snippet_complete marker.
'''
[[plugins]]
repo = 'Shougo/neosnippet-snippets'


[[plugins]] # カラースキーマ
repo = 'w0ng/vim-hybrid'
hook_add = '''
  let g:hybrid_custom_term_colors = 1
  let g:hybrid_reduced_contrast = 0
  set background=dark
  " colorscheme 設定は source 後に行う必要があるので VimEnter で行う。
  " 但し Colorscheme イベントの発生が抑制されないよう nested を付ける。
  au MyAutoCmd VimEnter * nested colorscheme hybrid
'''


[[plugins]]
repo = 'prabirshrestha/vim-lsp'
[[plugins]]
repo = 'mattn/vim-lsp-settings'


[[plugins]] # ステータスラインを手軽にかっこ良くする(要フォントパッチ)
repo = 'itchyny/lightline.vim'
depends = ['vim-hybrid']
hook_add = '''
  " lightlineがあればshowmodeは不用なので消す
  set noshowmode
  " ステータスラインを常に表示
  set laststatus=2
  " フォントパッチが何種類かあるのでコードでメモ
  let s:powerfonts = {
        \ 'powerline':     { 'left':"\ue0b0", 'leftsub':"\ue0b1", 'right':"\ue0b2", 'rightsub':"\ue0b3", 'branch':"\ue0a0", 'linecolumn':"\ue0a1", 'readonly':"\ue0a2" },
        \ 'vim-powerline': { 'left':"\u2b80", 'leftsub':"\u2b81", 'right':"\u2b82", 'rightsub':"\u2b83", 'branch':"\u2b60", 'linecolumn':"\u2b81", 'readonly':"\u2b64" }
        \ }
  " Patched fonts for Powerline https://github.com/powerline/fonts
  let s:powerfont = s:powerfonts['powerline']
  " TODO: ctrlpmark, unite, vimshell, vimfiler, ...対応
  " TODO: winwidth(0) を見てレスポンシブ対応
  " TODO: gitのahead/behind数表示
  let g:lightline = {
        " \ 'colorscheme': 'wombat',
        \ 'active': {
        \   'left': [ [ 'mode', 'paste' ],
        \             [ 'fugitive', 'gitgutter', 'readonly', 'relativepath', 'modified' ],
        \             [ 'ale' ] ]
        \ },
        \ 'component_function': {
        \   'fugitive': 'LightLineFugitive',
        \   'gitgutter': 'LightLineGitgutter',
        \   'readonly': 'LightLineReadonly',
        \   'modified': 'LightLineModified',
        \   'ale': 'ALEGetStatusLine'
        \ },
        \ 'separator': { 'left': s:powerfont.left, 'right': s:powerfont.right },
        \ 'subseparator': { 'left': s:powerfont.leftsub, 'right': s:powerfont.rightsub }
        \ }
  " gitブランチ表示
  function! LightLineFugitive()
    try
      if &ft !~? 'help\|vimfiler\|gundo' && exists("*fugitive#head")
        let _ = fugitive#head()
        return strlen(_) ? s:powerfont.branch .' '. _ : ''
      endif
    catch
    endtry
    return ''
  endfunction
  " gitハンク表示
  function! LightLineGitgutter()
    if ! exists('*GitGutterGetHunkSummary')
          \ || ! get(g:, 'gitgutter_enabled', 0)
          \ || winwidth('.') <= 90
      return ''
    endif
    let symbols = [
          \ g:gitgutter_sign_added,
          \ g:gitgutter_sign_modified,
          \ g:gitgutter_sign_removed
          \ ]
    let hunks = GitGutterGetHunkSummary()
    let ret = []
    for i in [0, 1, 2]
      if hunks[i] > 0
        call add(ret, symbols[i] . hunks[i])
      endif
    endfor
    return join(ret, ' ')
  endfunction
  " 読込み専用マーク
  function! LightLineReadonly()
    return &ft =~ 'help\|vimfiler\|gundo' ? '' : &readonly ? s:powerfont.readonly : ''
  endfunction
  " 編集マーク
  function! LightLineModified()
    return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
  endfunction
'''

[[plugins]] # \r で即時実行
repo = 'thinca/vim-quickrun'
hook_add = '''
let g:quickrun_config = get(g:, 'quickrun_config', {})
let g:quickrun_config._ = {
      \ 'runner'    : 'vimproc',
      \ 'runner/vimproc/updatetime' : 60,
      \ 'outputter' : 'error',
      \ 'outputter/error/success' : 'buffer',
      \ 'outputter/error/error'   : 'quickfix',
      \ 'outputter/buffer/split'  : ':rightbelow 8sp',
      \ 'outputter/buffer/close_on_empty' : 1,
      \ }
'''

[[plugins]] # 行末の空白の可視化＆ :FixWhitespace で削除
repo = 'bronson/vim-trailing-whitespace'

[[plugins]] # C-pでファイル選択が捗る http://bit.ly/NuXA5u
repo = 'ctrlpvim/ctrlp.vim'
hook_add = '''
  " <cr>をタブで開くにマッピング（eのデフォルトから<cr>を除いて、tのマッピングに追加する）
  let g:ctrlp_prompt_mappings = {
    \ 'AcceptSelection("e")': ['<2-LeftMouse>'],
    \ 'AcceptSelection("t")': ['<c-t>', '<cr>']
    \ }
  " ignoreされてるファイル/ディレクトリは検索しない（高速化）
  let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']
  " .gitなどを探してそこから下を探せるようにする
  let g:ctrlp_working_path_mode = 'ra'
'''

[[plugins]] # 行番号の左側にdiffの+-とかが表示されるようにする、[c と ]c で前後のHunkに移動できる。
repo = 'airblade/vim-gitgutter'
hook_add = '''
  let g:gitgutter_sign_modified = 'M'
  let g:gitgutter_max_signs = 5000
  " カレント行のhunkについて diff/add/reset を行うマップを追加
  nmap <Leader>hs <Plug>GitGutterStageHunk
  nmap <Leader>ha <Plug>GitGutterStageHunk
  nmap <Leader>hr <Plug>GitGutterRevertHunk
  nmap <Leader>hp <Plug>GitGutterPreviewHunk
  nmap <Leader>hd <Plug>GitGutterPreviewHunk
'''

[[plugins]] # GstatusとかGblameとかvim内でgit操作が出来る。あとgitcommitモードのmodifiedとかの行でEnterするとファイルに飛べたりする
repo = 'tpope/vim-fugitive'

[[plugins]]
# 簡単コメント、Ctr+/ でカーソル行or選択範囲をコメントトグル
repo = 'tyru/caw.vim'
hook_add = '''
  " C-/ でコメントアウト、ビジュアルモードでは選択範囲が解除されないよう直後にgvを足す
  nmap <C-_> <Plug>(caw:hatpos:toggle)
  vmap <C-_> <Plug>(caw:hatpos:toggle)gv
'''

[[plugins]]
# :Capture syn とかすると出力をバッファに入れることが出来る
repo = 'tyru/capture.vim'

[[plugins]]
# gx でカーソル位置のURLや単語をブラウザで開くorググる
repo = 'tyru/open-browser.vim'
hook_add = '''
  " gs でカーソル下のURLをブラウザで開く
  nmap gx <Plug>(openbrowser-smart-search)
  vmap gx <Plug>(openbrowser-smart-search)
'''

[[plugins]]
# :Tabularize /, とかでアライン整形（使い方メモ http://teotr.github.io/blog/2011/04/15/tabular/
repo = 'godlygeek/tabular'

[[plugins]]
# Markdownのテーブル編集を簡単にする :TableModeToggle
repo = 'dhruvasagar/vim-table-mode'
on_ft = 'markdown'

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]] # g> g< gs で引数の位置交換を簡単に行う
repo = 'machakann/vim-swap'

[[plugins]] # 単語上で K でftに対応したdevdocs検索が出来るようにする http://bit.ly/1sbXZnf
repo = 'rhysd/devdocs.vim'
hook_add = '''
  autocmd FileType c,cpp,rust,haskell,python,go,javascript,ruby,php nmap <buffer>K <Plug>(devdocs-under-cursor)
'''

[[plugins]]
repo = 'kawaz/quickrun-local-mocha.vim'

[[plugins]] # 今時のSyntastic/Neomake的なやつ（非同期で軽い）
repo = 'w0rp/ale'
hook_add = '''
  let g:ale_sign_column_always = 1
  let g:ale_sign_error = 'X'
  let g:ale_sign_warning = 'W'
  let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '']
  if 1
    " use quickfix instead of loclist
    let g:ale_set_loclist = 0
    let g:ale_set_quickfix = 1
  endif
  " let g:ale_open_list = 1
  " let g:ale_keep_list_window_open = 0
  " C-j/k でALE警告箇所を移動する
  nmap <C-K> <Plug>(ale_previous)
  nmap <C-J> <Plug>(ale_next)
  " shellcheck ignores (comma separated value, ex:'SCxxxx,SCxxxx')
  " SC1091: 変数のあるsource (例:source "$foo/bar.sh")
  " SC2016: シングルクオート文字列中の変数ぽいのは展開されないよ警告 (例:echo '$foo')
  let g:ale_linters_sh_shellcheck_exclusions = 'SC1091,SC2016'
  " :ALEFix
  let g:ale_fixers = {
        \   'javascript': [
        \       'eslint',
        \       'remove_trailing_lines',
        \   ],
        \}
'''

[[plugins]]
repo = 'tyru/vim-altercmd'
on_event = ['VimEnter']
hook_source = '''
  " 使うには初期化処理が必要
  call altercmd#load()
  " helpを横分割で右側に開く
  CAlterCommand h[elp] vertical belowright help
  " helpを横分割で右側に開く
  CAlterCommand e tabnew
'''

# toml
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml']

[[plugins]]
# ツリー状のundo履歴をブラウズする :GundoTree
repo = 'sjl/gundo.vim'

